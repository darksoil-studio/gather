{"version":3,"sources":["../../src/main.ts"],"sourcesContent":["import chalk from 'chalk'\nimport { spawn } from 'child_process'\nimport pick from 'lodash.pick'\nimport npmRunPath from 'npm-run-path'\n\nimport { Checker } from './Checker.js'\nimport {\n  composePreambleCode,\n  RUNTIME_CLIENT_ENTRY_PATH,\n  RUNTIME_CLIENT_RUNTIME_PATH,\n  runtimeCode,\n  WS_CHECKER_RECONNECT_EVENT,\n} from './client/index.js'\nimport {\n  ACTION_TYPES,\n  BuildCheckBinStr,\n  BuildInCheckerNames,\n  ClientDiagnosticPayload,\n  ClientReconnectPayload,\n  OverlayErrorAction,\n  PluginConfig,\n  ServeAndBuildChecker,\n  SharedConfig,\n  UserPluginConfig,\n} from './types.js'\n\nimport type { ConfigEnv, Plugin, ResolvedConfig } from 'vite'\nconst sharedConfigKeys: (keyof SharedConfig)[] = ['enableBuild', 'overlay']\nconst buildInCheckerKeys: BuildInCheckerNames[] = [\n  'typescript',\n  'vueTsc',\n  'vls',\n  'eslint',\n  'stylelint',\n]\n\nasync function createCheckers(\n  userConfig: UserPluginConfig,\n  env: ConfigEnv\n): Promise<ServeAndBuildChecker[]> {\n  const serveAndBuildCheckers: ServeAndBuildChecker[] = []\n  const sharedConfig = pick(userConfig, sharedConfigKeys)\n\n  // buildInCheckerKeys.forEach(async (name: BuildInCheckerNames) => {\n  for (const name of buildInCheckerKeys) {\n    if (!userConfig[name]) continue\n    const { createServeAndBuild } = await import(`./checkers/${name}/main.js`)\n    serveAndBuildCheckers.push(\n      createServeAndBuild({ [name]: userConfig[name], ...sharedConfig }, env)\n    )\n  }\n\n  return serveAndBuildCheckers\n}\n\nexport function checker(userConfig: UserPluginConfig): Plugin {\n  const enableBuild = userConfig?.enableBuild ?? true\n  const enableOverlay = userConfig?.overlay !== false\n  const enableTerminal = userConfig?.terminal !== false\n  const overlayConfig = typeof userConfig?.overlay === 'object' ? userConfig?.overlay : {}\n  let initialized = false\n  let initializeCounter = 0\n  let checkers: ServeAndBuildChecker[] = []\n  let isProduction = true\n  let skipRuntime = false\n  let devBase = '/'\n\n  let viteMode: ConfigEnv['command'] | undefined\n  let resolvedConfig: ResolvedConfig | undefined\n\n  return {\n    name: 'vite-plugin-checker',\n    enforce: 'pre',\n    // @ts-ignore\n    __internal__checker: Checker,\n    config: async (config, env) => {\n      // for dev mode (1/2)\n      // Initialize checker with config\n      viteMode = env.command\n      // avoid running twice when running in SSR\n      if (initializeCounter === 0) {\n        initializeCounter++\n      } else {\n        initialized = true\n        return\n      }\n\n      checkers = await createCheckers(userConfig || {}, env)\n      if (viteMode !== 'serve') return\n\n      checkers.forEach((checker) => {\n        const workerConfig = checker.serve.config\n        workerConfig({\n          enableOverlay,\n          enableTerminal,\n          env,\n        })\n      })\n    },\n    configResolved(config) {\n      resolvedConfig = config\n      devBase = config.base\n      isProduction = config.isProduction\n      skipRuntime ||= isProduction || config.command === 'build'\n    },\n    buildEnd() {\n      if (initialized) return\n\n      if (viteMode === 'serve') {\n        checkers.forEach((checker) => {\n          const { worker } = checker.serve\n          worker.terminate()\n        })\n      }\n    },\n    resolveId(id) {\n      if (id === RUNTIME_CLIENT_RUNTIME_PATH || id === RUNTIME_CLIENT_ENTRY_PATH) {\n        return id\n      }\n\n      return\n    },\n    load(id) {\n      if (id === RUNTIME_CLIENT_RUNTIME_PATH) {\n        return runtimeCode\n      }\n\n      if (id === RUNTIME_CLIENT_ENTRY_PATH) {\n        return composePreambleCode(devBase, overlayConfig)\n      }\n\n      return\n    },\n    transformIndexHtml() {\n      if (initialized) return\n      if (skipRuntime) return\n\n      return [\n        {\n          tag: 'script',\n          attrs: { type: 'module' },\n          children: composePreambleCode(resolvedConfig!.base, overlayConfig),\n        },\n      ]\n    },\n    buildStart: () => {\n      if (initialized) return\n      // only run in build mode\n      // run a bin command in a separated process\n      if (!skipRuntime || !enableBuild) return\n\n      const localEnv = npmRunPath.env({\n        env: process.env,\n        cwd: process.cwd(),\n        execPath: process.execPath,\n      })\n\n      // spawn an async runner that we don't wait for in order to avoid blocking the build from continuing in parallel\n      ;(async () => {\n        const exitCodes = await Promise.all(\n          checkers.map((checker) => spawnChecker(checker, userConfig, localEnv))\n        )\n        const exitCode = exitCodes.find((code) => code !== 0) ?? 0\n        // do not exit the process if run `vite build --watch`\n        if (exitCode !== 0 && !resolvedConfig?.build.watch) {\n          process.exit(exitCode)\n        }\n      })()\n    },\n    configureServer(server) {\n      if (initialized) return\n\n      let latestOverlayErrors: ClientReconnectPayload['data'] = new Array(checkers.length)\n      // for dev mode (2/2)\n      // Get the server instance and keep reference in a closure\n      checkers.forEach((checker, index) => {\n        const { worker, configureServer: workerConfigureServer } = checker.serve\n        workerConfigureServer({ root: server.config.root })\n        worker.on('message', (action: OverlayErrorAction) => {\n          if (action.type === ACTION_TYPES.overlayError) {\n            latestOverlayErrors[index] = action.payload as ClientDiagnosticPayload\n            if (action.payload) {\n              server.ws.send('vite-plugin-checker', action.payload)\n            }\n          } else if (action.type === ACTION_TYPES.console) {\n            Checker.log(action)\n          }\n        })\n      })\n\n      return () => {\n        if (server.ws.on) {\n          server.ws.on('vite-plugin-checker', (data) => {\n            // NOTE: sync modification with packages /packages/runtime/src/ws.js\n            if (data.event === 'runtime-loaded') {\n              server.ws.send('vite-plugin-checker', {\n                event: WS_CHECKER_RECONNECT_EVENT,\n                data: latestOverlayErrors.filter(Boolean),\n              })\n            }\n          })\n        } else {\n          setTimeout(() => {\n            console.warn(\n              chalk.yellow(\n                \"[vite-plugin-checker]: `server.ws.on` is introduced to Vite in 2.6.8, see [PR](https://github.com/vitejs/vite/pull/5273) and [changelog](https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#268-2021-10-18). \\nvite-plugin-checker relies on `server.ws.on` to bring diagnostics back after a full reload and it' not available for you now due to the old version of Vite. You can upgrade Vite to latest version to eliminate this warning.\"\n              )\n            )\n            // make a delay to avoid flush by Vite's console\n          }, 5000)\n        }\n\n        server.middlewares.use((req, res, next) => {\n          next()\n        })\n      }\n    },\n  }\n}\n\nfunction spawnChecker(\n  checker: ServeAndBuildChecker,\n  userConfig: Partial<PluginConfig>,\n  localEnv: npmRunPath.ProcessEnv\n) {\n  return new Promise<number>((resolve) => {\n    const buildBin = checker.build.buildBin\n    const finalBin: BuildCheckBinStr =\n      typeof buildBin === 'function' ? buildBin(userConfig) : buildBin\n\n    const proc = spawn(...finalBin, {\n      cwd: process.cwd(),\n      stdio: 'inherit',\n      env: localEnv,\n      // shell is necessary on windows to get the process to even start.\n      // Command line args constructed by checkers therefore need to escape double quotes\n      // to have them not striped out by cmd.exe. Using shell on all platforms lets us avoid\n      // having to perform platform-specific logic around escaping quotes since all platform\n      // shells will strip out unescaped double quotes. E.g. shell=false on linux only would\n      // result in escaped quotes not being unescaped.\n      shell: true,\n    })\n\n    proc.on('exit', (code) => {\n      if (code !== null && code !== 0) {\n        resolve(code)\n      } else {\n        resolve(0)\n      }\n    })\n  })\n}\n\nexport default checker\n"],"mappings":"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","names":["checker"]}