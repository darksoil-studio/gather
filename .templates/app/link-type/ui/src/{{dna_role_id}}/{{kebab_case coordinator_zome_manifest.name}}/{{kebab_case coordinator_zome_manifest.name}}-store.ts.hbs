{{#merge_scope previous_file_content (concat "export class " (pascal_case coordinator_zome_manifest.name) "Store {" ) }}
  {{previous_scope_content}}
  /** {{title_case (plural to_referenceable.name)}} for {{title_case from_referenceable.name}} */
  private _{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}: Writable<{{from_referenceable.hash_type}}Map<Array<{{to_referenceable.hash_type}}>>> = writable(new {{from_referenceable.hash_type}}Map());
  {{#if bidireccional}}
  private _{{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}: Writable<{{to_referenceable.hash_type}}Map<Array<{{from_referenceable.hash_type}}>>> = writable(new {{to_referenceable.hash_type}}Map());
  {{/if}}

  async fetch{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}): Promise<Readable<Array<{{to_referenceable.hash_type}}>>> {
    const hashes = await this.client.get{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}});
    
    this._{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}.update(hashMap => {
      const previousHashes = hashMap.get({{camel_case from_referenceable.singular_arg}}) || [];
      hashMap.put({{camel_case from_referenceable.singular_arg}}, [...previousHashes, ...hashes]);
      return hashMap;
    });
    
    return derived(this._{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}, hashMap => hashMap.get({{camel_case from_referenceable.singular_arg}}));
  }
  
  async add{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}, {{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}): Promise<void> {
    await this.client.add{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}, {{camel_case to_referenceable.singular_arg}});
    
    this._{{camel_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}.update(hashMap => {
      const previousHashes = hashMap.get({{camel_case from_referenceable.singular_arg}}) || [];
      hashMap.put({{camel_case from_referenceable.singular_arg}}, [...previousHashes, {{camel_case to_referenceable.singular_arg}}]);
      return hashMap;
    });
    
    {{#if bidireccional}}
    this._{{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}.update(hashMap => {
      const previousHashes = hashMap.get({{camel_case to_referenceable.singular_arg}}) || [];
      hashMap.put({{camel_case to_referenceable.singular_arg}}, [...previousHashes, {{camel_case from_referenceable.singular_arg}}]);
      return hashMap;
    });
    {{/if}}
  }
  
  {{#if bidireccional}}
  async fetch{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}): Promise<Readable<Array<{{from_referenceable.hash_type}}>>> {
    const hashes = await this.client.get{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}});
    
    this._{{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}.update(hashMap => {
      const previousHashes = hashMap.get({{camel_case to_referenceable.singular_arg}}) || [];
      hashMap.put({{camel_case to_referenceable.singular_arg}}, [...previousHashes, ...hashes]);
      return hashMap;
    });
    
    return derived(this._{{camel_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}, hashMap => hashMap.get({{camel_case to_referenceable.singular_arg}}));
  }
  {{/if}}
{{/merge_scope}}
