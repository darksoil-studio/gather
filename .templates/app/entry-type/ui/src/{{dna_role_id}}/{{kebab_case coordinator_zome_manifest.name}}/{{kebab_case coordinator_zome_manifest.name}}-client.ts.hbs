import { {{pascal_case entry_type.name}} } from './types';

{{#merge_scope previous_file_content (concat "export class " (pascal_case coordinator_zome_manifest.name) "Client {" ) }}
  {{previous_scope_content}}
  /** {{title_case entry_type.name}} */

  create{{pascal_case entry_type.name}}({{camel_case entry_type.name}}: {{pascal_case entry_type.name}}): Promise<Record> {
    return this.callZome('create_{{snake_case entry_type.name}}', {{camel_case entry_type.name}});
  }
  
  get{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}): Promise<Record | undefined> {
    return this.callZome('get_{{snake_case entry_type.name}}', {{camel_case entry_type.name}}Hash);
  }

  {{#if crud.delete}}
  delete{{pascal_case entry_type.name}}(original{{pascal_case entry_type.name}}Hash: ActionHash): Promise<ActionHash> {
    return this.callZome('delete_{{snake_case entry_type.name}}', original{{pascal_case entry_type.name}}Hash);
  }
  {{/if}}

  {{#if crud.update}}
  update{{pascal_case entry_type.name}}({{#if link_from_original_to_each_update}}original{{pascal_case entry_type.name}}Hash: ActionHash,{{/if}} previous{{pascal_case entry_type.name}}Hash: ActionHash, updated{{pascal_case entry_type.name}}: {{pascal_case entry_type.name}}): Promise<Record> {
    return this.callZome('update_{{snake_case entry_type.name}}', {
      {{#if link_from_original_to_each_update}}
      original_{{snake_case entry_type.name}}_hash: original{{pascal_case entry_type.name}}Hash,
      {{/if}}
      previous_{{snake_case entry_type.name}}_hash: previous{{pascal_case entry_type.name}}Hash,
      updated_{{snake_case entry_type.name}}: updated{{pascal_case entry_type.name}}
    });
  }
  {{/if}}
  
  {{#each entry_type.fields}}
    {{#if linked_from}}
  get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}: {{linked_from.hash_type}}): Promise<Array<{{#if ../entry_type.fixed}}EntryHash{{else}}ActionHash{{/if}}>> {
    return this.callZome('get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}', {{camel_case linked_from.singular_arg}});
  }
    {{/if}}
  {{/each}}

{{/merge_scope}}
