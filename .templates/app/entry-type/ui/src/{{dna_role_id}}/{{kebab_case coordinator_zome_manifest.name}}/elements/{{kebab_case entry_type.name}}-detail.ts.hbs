import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, AppWebsocket, EntryHash, Record, ActionHash, InstalledAppInfo } from '@holochain/client';
import { RecordBag, EntryRecord } from '@holochain-open-dev/utils';
import { TaskSubscriber } from 'lit-svelte-stores';
import { EntryState } from '@holochain-open-dev/utils';
import { hashProperty } from '@holochain-open-dev/elements';
import { contextProvided } from '@lit-labs/context';
import { Task } from '@lit-labs/task';
import { decode } from '@msgpack/msgpack';
import { CircularProgress, Card, Button, Snackbar } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';

{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/detail/imports") }}

{{/each}}
{{#if crud.update}}
import { Edit{{pascal_case entry_type.name}} } from './edit-{{kebab_case entry_type.name}}';
{{/if}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}} } from '../types';
import { sharedStyles } from '../../../shared-styles';

export class {{pascal_case entry_type.name}}Detail extends ScopedElementsMixin(LitElement) {
  @property(hashProperty('{{kebab_case entry_type.name}}-hash'))
  {{camel_case entry_type.name}}Hash!: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}};

  @contextProvided({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  _fetch{{pascal_case entry_type.name}} = new Task{{#if (not entry_type.reference_entry_hash)}}Subscriber{{/if}}(this, 
    ([store, {{camel_case entry_type.name}}Hash]) => store.fetch{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash), 
    () => [this.{{camel_case coordinator_zome_manifest.name}}Store, this.{{camel_case entry_type.name}}Hash] as [{{pascal_case coordinator_zome_manifest.name}}Store, {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}]
  );

  {{#if crud.update}}
  @state()
  _editing = false;
  {{/if}}

  {{#if crud.delete}}
  async delete{{pascal_case entry_type.name}}() {
    try {
      await this.{{camel_case coordinator_zome_manifest.name}}Store.delete{{pascal_case entry_type.name}}(this.{{camel_case entry_type.name}}Hash);
 
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-deleted', {
        bubbles: true,
        composed: true,
        detail: {
          {{camel_case entry_type.name}}Hash: this.{{camel_case entry_type.name}}Hash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('delete-error') as Snackbar;
      errorSnackbar.labelText = `Error deleting the {{lower_case entry_type.name}}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }
  {{/if}}

  renderDetail(maybeEntryRecord: EntryRecord<{{pascal_case entry_type.name}}>) {
    return html`{{#if crud.delete}}
      <mwc-snackbar id="delete-error" leading>
      </mwc-snackbar>
      {{/if}}

      <div style="display: flex; flex-direction: column">
      	<div style="display: flex; flex-direction: row">
          <span style="font-size: 18px; flex: 1;">{{title_case entry_type.name}}</span>

          {{#if crud.update}}
          <mwc-icon-button style="margin-left: 8px" icon="edit" @click=${() => { this._editing = true; } }></mwc-icon-button>
          {{/if}}
          {{#if crud.delete}}
          <mwc-icon-button style="margin-left: 8px" icon="delete" @click=${() => this.delete{{pascal_case entry_type.name}}()}></mwc-icon-button>
          {{/if}}
        </div>

	{{#each entry_type.fields}}
          {{#if widget}}	  
            {{#if (not (eq cardinality "vector") )}}
 	<div style="display: flex; flex-direction: row">
	  <span><strong>{{title_case field_name}}</strong></span>
 	  <span style="white-space: pre-line">{{> (concat field_type "/" widget "/detail/render") variable_to_read=(concat "maybeEntryRecord.entry." (snake_case field_name) ) }}</span>
	</div>
            {{else}}
          {{> Vec/detail/render variable_to_read=(concat "maybeEntryRecord.entry." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
            {{/if}}

 	  {{/if}}
	{{/each}}
      </div>
    `;
  }
  
  render{{pascal_case entry_type.name}}({{#if entry_type.reference_entry_hash}}maybe{{pascal_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}>{{else}}maybeEntryState: EntryState<{{pascal_case entry_type.name}}>{{/if}} | undefined) {
    if (!{{#if entry_type.reference_entry_hash}}maybe{{pascal_case entry_type.name}}{{else}}maybeEntryState{{/if}}) return html`<span>The requested {{lower_case entry_type.name}} doesn't exist</span>`;
    
    {{#if crud.update}}
    if (this._editing) {
    	return html`<edit-{{kebab_case entry_type.name}}
          {{#if link_from_original_to_each_update}}
    	  .original{{pascal_case entry_type.name}}Hash=${this.{{camel_case entry_type.name}}Hash}
    	  {{/if}}
    	  .currentRecord=${ {{#if entry_type.reference_entry_hash}}maybe{{camel_case entry_type.name}}{{else}}maybeEntryState.lastUpdate{{/if}} }
    	  @{{kebab_case entry_type.name}}-updated=${async () => { this._editing = false; } }
    	  @edit-canceled=${() => { this._editing = false; } }
    	  style="display: flex; flex: 1;"
    	></edit-{{kebab_case entry_type.name}}>`;
    }

    {{/if}}
    return this.renderDetail({{#if entry_type.reference_entry_hash}}maybe{{pascal_case entry_type.name}}{{else}}maybeEntryState.lastUpdate{{/if}});
  }

  render() {
    return html`<mwc-card style="display: flex; flex: 1;">
      ${this._fetch{{pascal_case entry_type.name}}.render({
        pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
          <mwc-circular-progress indeterminate></mwc-circular-progress>
        </div>`,
        complete: (entry) => this.render{{pascal_case entry_type.name}}(entry),
        error: (e: any) => html`<span>Error fetching the {{lower_case entry_type.name}}: ${e.data.data}</span>`
      })}
    </mwc-card>`;
  }
  
  static get scopedElements() {
    return {
      {{#if crud.update}}
      'edit-{{kebab_case entry_type.name}}': Edit{{pascal_case entry_type.name}},
      {{/if}}
      'mwc-snackbar': Snackbar,
      'mwc-card': Card,
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type "/" widget "/detail/scoped-elements") }}
          {{/if}}
        {{/each}}
    };
  }
  
  static styles = [sharedStyles];
}
