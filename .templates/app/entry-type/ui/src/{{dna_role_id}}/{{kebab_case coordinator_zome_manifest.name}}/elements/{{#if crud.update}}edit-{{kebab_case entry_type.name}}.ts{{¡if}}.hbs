import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, ActionHash, Record, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { RecordBag, EntryRecord } from '@holochain-open-dev/utils';
import { hashState, hashProperty } from '@holochain-open-dev/elements';
import { contextProvided } from '@lit-labs/context';
import { decode } from '@msgpack/msgpack';
import { Button, Snackbar } from '@scoped-elements/material-web';

{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/edit/imports") }}

{{/each}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}} } from '../types';
import { sharedStyles } from '../../../shared-styles';

export class Edit{{pascal_case entry_type.name}} extends LitElement {

  @property(hashProperty('original-{{kebab_case entry_type.name}}-hash'))
  original{{pascal_case entry_type.name}}Hash!: ActionHash;
  
  @property()
  currentRecord!: EntryRecord<{{pascal_case entry_type.name}}>;
 
  @contextProvided({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;
 
  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  @state({{#if (or (eq field_type "AgentPubKey") (eq field_type "ActionHash") (eq field_type "EntryHash"))}}hashState(){{/if}})
  _{{camel_case field_name}}: {{> (concat field_type "/type") }} = this.currentRecord.entry.{{snake_case field_name}};

      {{else}}
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type "/type") }} | undefined> = this.currentRecord.entry.{{snake_case field_name}};

      {{/if}}
    {{/if}}
  {{/each}}

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && this._{{camel_case field_name}}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.every(e => e !== undefined){{/if}}{{/if}}{{/each}};
  }

  async update{{pascal_case entry_type.name}}() {
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "single") }}
      {{snake_case field_name}}: this._{{camel_case field_name}}!,
        {{else}}
      {{snake_case field_name}}: this._{{camel_case field_name}},
        {{/if}}
      {{/if}}
    {{/each}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
      {{snake_case field_name}}: this.currentRecord.entry.{{snake_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const updateRecord = await this.{{camel_case coordinator_zome_manifest.name}}Store.update{{pascal_case entry_type.name}}(
        this.original{{pascal_case entry_type.name}}Hash,
        this.currentRecord.actionHash,
        {{camel_case entry_type.name}}
      );
  
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-updated', {
        composed: true,
        bubbles: true,
        detail: {
          original{{pascal_case entry_type.name}}Hash: this.original{{pascal_case entry_type.name}}Hash,
          previous{{pascal_case entry_type.name}}Hash: this.currentRecord.actionHash,
          updated{{pascal_case entry_type.name}}Hash: updateRecord.actionHash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('update-error') as Snackbar;
      errorSnackbar.labelText = `Error updating the {{lower_case entry_type.name}}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }

  render() {
    return html`
      <mwc-snackbar id="update-error" leading>
      </mwc-snackbar>

      <div style="display: flex; flex-direction: column">
        <span style="font-size: 18px">Edit {{title_case entry_type.name}}</span>
        {{#each entry_type.fields}}
          {{#if widget}}
            {{#if (not (eq cardinality "vector") )}}
        {{> (concat field_type "/" widget "/edit/render") label=(title_case field_name) initial_value_variable=(concat "this._" (camel_case field_name) ) variable_to_change=(concat "this._" (camel_case field_name) ) }}
            {{else}}
        {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
            {{/if}}
          {{/if}}

        {{/each}}


        <div style="display: flex; flex-direction: row">
          <mwc-button
            outlined
            label="Cancel"
            @click=${() => this.dispatchEvent(new CustomEvent('edit-canceled', {
              bubbles: true,
              composed: true
            }))}
            style="flex: 1;"
          ></mwc-button>
          <mwc-button 
            raised
            label="Save"
            .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
            @click=${() => this.update{{pascal_case entry_type.name}}()}
            style="flex: 1;"
          ></mwc-button>
        </div>
      </div>`;
  }
  
  static get scopedElements() {
    return {
      'mwc-snackbar': Snackbar,
      'mwc-button': Button,
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type "/" widget "/edit/scoped-elements") }}
          {{/if}}
        {{/each}}
    };
  }

  static styles = [sharedStyles];
}
