import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, ActionHash, Record, AgentPubKey, EntryHash, AppWebsocket, InstalledAppInfo } from '@holochain/client';
import { RecordBag, EntryRecord } from '@holochain-open-dev/utils';
import { hashProperty, hashState } from '@holochain-open-dev/elements';
import { contextProvided } from '@lit-labs/context';
import { Snackbar, Button, Card } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';

{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/edit/imports") }}

{{/each}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}} } from '../types';
import { sharedStyles } from '../../../shared-styles';

export class Create{{pascal_case entry_type.name}} extends ScopedElementsMixin(LitElement) {
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  @property({{#if (or (eq field_type "AgentPubKey") (eq field_type "ActionHash") (eq field_type "EntryHash"))}}hashProperty('{{kebab_case field_name}}'){{/if}})
  {{camel_case field_name}}!: {{> (concat field_type "/type") }};

      {{else}}
  @property()
  {{camel_case field_name}}!: Array<{{> (concat field_type "/type") }}>;

      {{/if}}
    {{/if}}
  {{/each}}

  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  @state({{#if (or (eq field_type "AgentPubKey") (eq field_type "ActionHash") (eq field_type "EntryHash"))}}hashState(){{/if}})
  _{{camel_case field_name}}: {{> (concat field_type "/type") }} | undefined;

      {{else}}
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type "/type") }} | undefined> = [];

      {{/if}}
    {{/if}}
  {{/each}}

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && this._{{camel_case field_name}}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.every(e => e !== undefined){{/if}}{{/if}}{{/each}};
  }

  @contextProvided({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  async create{{pascal_case entry_type.name}}() {
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "single") }}
        {{snake_case field_name}}: this._{{camel_case field_name}}!,
        {{else}}
        {{snake_case field_name}}: this._{{camel_case field_name}},
        {{/if}}
      {{/if}}
    {{/each}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
        {{snake_case field_name}}: this.{{camel_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const record: Record = await this.{{camel_case coordinator_zome_manifest.name}}Store.create{{pascal_case entry_type.name}}({{camel_case entry_type.name}});

      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-created', {
        composed: true,
        bubbles: true,
        detail: {
          {{camel_case entry_type.name}}Hash: record.signed_action.hashed.hash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('create-error') as Snackbar;
      errorSnackbar.labelText = `Error creating the {{lower_case entry_type.name}}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }

  render() {
    return html`
      <mwc-snackbar id="create-error" leading>
      </mwc-snackbar>

      <mwc-card style="display: flex; flex: 1;">
        <div style="display: flex; flex: 1; flex-direction: column">
          <span style="font-size: 18px">Create {{title_case entry_type.name}}</span>
  
          {{#each entry_type.fields}}
            {{#if widget}}
              {{#if (not (eq cardinality "vector") )}}
          {{> (concat field_type "/" widget "/edit/render") label=(title_case field_name) variable_to_change=(concat "this._" (camel_case field_name) ) }}
              {{else}}
          {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
              {{/if}}
            {{/if}}

          {{/each}}

          <mwc-button 
            raised
            label="Create {{title_case entry_type.name}}"
            .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
            @click=${() => this.create{{pascal_case entry_type.name}}()}
          ></mwc-button>
        </mwc-card>
    </div>`;
  }
  
  static get scopedElements() {
    return {
      'mwc-snackbar': Snackbar,
      'mwc-button': Button,
      'mwc-card': Card,
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type "/" widget "/edit/scoped-elements") }}
          {{/if}}
        {{/each}}
    };
  }
  
  static styles = [sharedStyles];
}
