import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, AppWebsocket, EntryHash, Record, ActionHash, InstalledAppInfo } from '@holochain/client';
import { RecordBag, EntryRecord } from '@holochain-open-dev/utils';
import { TaskSubscriber } from 'lit-svelte-stores';
import { EntryState } from '@holochain-open-dev/utils';
import { hashProperty } from '@holochain-open-dev/elements';
import { contextProvided } from '@lit-labs/context';
import { Task } from '@lit-labs/task';
import { decode } from '@msgpack/msgpack';
import { CircularProgress, Card, Button, Snackbar } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';
{{#each entry_type.fields}}
{{> (concat field_type "/" widget "/detail/imports") }}
{{/each}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}} } from '../types';
import { sharedStyles } from '../../../shared-styles';

export class {{pascal_case entry_type.name}}Summary extends ScopedElementsMixin(LitElement) {
  @property(hashProperty('{{kebab_case entry_type.name}}-hash'))
  {{camel_case entry_type.name}}Hash!: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}};

  @contextProvided({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  _fetch{{pascal_case entry_type.name}} = new Task{{#if (not entry_type.reference_entry_hash)}}Subscriber{{/if}}(this, 
    ([store, {{camel_case entry_type.name}}Hash]) => store.fetch{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash), 
    () => [this.{{camel_case coordinator_zome_manifest.name}}Store, this.{{camel_case entry_type.name}}Hash] as [{{pascal_case coordinator_zome_manifest.name}}Store, {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}]
  );

  renderSummary(maybeEntryRecord: EntryRecord<{{pascal_case entry_type.name}}>) {
    return html`
      <div style="display: flex; flex-direction: column">
      	<div style="display: flex; flex-direction: row">
          <span style="font-size: 18px; flex: 1;">{{title_case entry_type.name}}</span>

        </div>

	{{#each entry_type.fields}}
          {{#if widget}}	  
            {{#if (not (eq cardinality "vector") )}}
 	<div style="display: flex; flex-direction: row">
	  <span><strong>{{title_case field_name}}</strong></span>
 	  <span style="white-space: pre-line">{{> (concat field_type "/" widget "/detail/render") variable_to_read=(concat "maybeEntryRecord.entry." (snake_case field_name) ) }}</span>
	</div>
            {{else}}
          {{> Vec/detail/render variable_to_read=(concat "maybeEntryRecord.entry." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
            {{/if}}

 	  {{/if}}
	{{/each}}
      </div>
    `;
  }
  
  render{{pascal_case entry_type.name}}({{#if entry_type.reference_entry_hash}}maybe{{pascal_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}>{{else}}maybeEntryState: EntryState<{{pascal_case entry_type.name}}>{{/if}} | undefined) {
    if (!{{#if entry_type.reference_entry_hash}}maybe{{pascal_case entry_type.name}}{{else}}maybeEntryState{{/if}}) return html`<span>The requested {{lower_case entry_type.name}} doesn't exist</span>`;

    return this.renderSummary({{#if entry_type.reference_entry_hash}}maybe{{pascal_case entry_type.name}}{{else}}maybeEntryState.lastUpdate{{/if}});
  }

  render() {
    return html`<mwc-card style="display: flex; flex: 1;" @click=${() => this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-selected', {
          composed: true,
          bubbles: true,
          detail: {
            {{camelCase entry_type.name}}Hash: this.{{camel_case entry_type.name}}Hash
          }
        }))}>
      ${this._fetch{{pascal_case entry_type.name}}.render({
        pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
          <mwc-circular-progress indeterminate></mwc-circular-progress>
        </div>`,
        complete: (entry) => this.render{{pascal_case entry_type.name}}(entry),
        error: (e: any) => html`<span>Error fetching the {{lower_case entry_type.name}}: ${e.data.data}</span>`
      })}
    </mwc-card>`;
  }
  
  static get scopedElements() {
    return {
      'mwc-snackbar': Snackbar,
      'mwc-card': Card,
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type "/" widget "/detail/scoped-elements") }}
          {{/if}}
        {{/each}}

    };
  }
  
  static styles = [sharedStyles];
}
